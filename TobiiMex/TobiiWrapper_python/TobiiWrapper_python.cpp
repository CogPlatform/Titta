#include "TobiiMex/TobiiMex.h"
#include "TobiiMex/utils.h"

#include <iostream>
#include <string>

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
namespace py = pybind11;
using namespace pybind11::literals;


// start module scope
#ifdef NDEBUG
PYBIND11_MODULE(TobiiWrapper_python, m)
#else
PYBIND11_MODULE(TobiiWrapper_python_d, m)
#endif
{
    py::class_<TobiiMex>(m, "TobiiWrapper")
        .def(py::init<std::string>(),"address"_a)

        .def("__repr__",
            [](TobiiMex& instance_)
            {
                return "<TobiiWrapper_python.TobiiWrapper connected to '"+ instance_.getConnectedEyeTracker().model +"' at '" + instance_.getConnectedEyeTracker().address + "'>";
            })

        .def("start", py::overload_cast<std::string, std::optional<size_t>, std::optional<bool>>(&TobiiMex::start),
            "stream"_a, py::arg_v("initialBufferSize", std::nullopt, "None"), py::arg_v("asGif", std::nullopt, "None"))

        .def("peekN",
            [](TobiiMex& instance_, std::string stream_, std::optional<size_t> NSamp_, std::string side_)
            {
                TobiiMex::DataStream dataStream = TobiiMex::stringToDataStream(stream_);

                std::optional<TobiiMex::BufferSide> bufSide;
                if (!side_.empty())
                {
                    bufSide = TobiiMex::stringToBufferSide(side_);
                }

                switch (dataStream)
                {
                case TobiiMex::DataStream::Gaze:
                    return instance_.peekN<TobiiMex::gaze>(NSamp_, bufSide);
                }
            },
            "stream"_a, py::arg_v("NSamp", std::nullopt, "None"), py::arg_v("side", "", "None"))

        .def("stop", py::overload_cast<std::string, std::optional<bool>>(&TobiiMex::stop),
            "stream"_a, py::arg_v("emptyBuffer", std::nullopt, "None"))
        ;
}

// function for handling errors generated by lib
void DoExitWithMsg(std::string errMsg_)
{
    PyErr_SetString(PyExc_RuntimeError, errMsg_.c_str());
    throw py::error_already_set();
}
void RelayMsg(std::string msg_)
{
    py::print(msg_.c_str());
}